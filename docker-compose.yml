services:
  # Redis for Queue
  redis:
    image: redis:8-alpine
    ports:
      - "6379:6379"
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 40M
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s

  # PostgreSQL for persistent data
  postgres:
    image: postgres:17-alpine
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: payments
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/01-init.sql
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 80M
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d payments"]
      interval: 5s  # Reduzido de 2s para economizar CPU
      timeout: 3s
      retries: 3    # Reduzido de 5
      start_period: 20s  # Aumentado pa

  # API instances
  app1: &app
    build:
      context: .
      target: api
    environment:
      - DATABASE_URL=postgres://postgres:password@postgres:5432/payments
      - REDIS_URL=redis://redis:6379
      - PORT=3000
    depends_on:
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 45M
    networks:
      - backend

  app2:
    <<: *app

  # Load balancer (nginx)
  nginx:
    image: nginx:alpine
    ports:
      - "9999:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - app1
      - app2
    deploy:
      resources:
        limits:
          cpus: '0.20'
          memory: 60M
    networks:
      - backend

  # Payment Worker
  payment-worker1: &worker
    build:
      context: .
      target: payment-worker
    environment:
      - DATABASE_URL=postgres://postgres:password@postgres:5432/payments
      - REDIS_URL=redis://redis:6379
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - QUEUE_NAME=payment_queue
      - WORKER_CONCURRENCY=15
      - DATABASE_MAX_CONNECTIONS=40
      - HTTP_CLIENT_TIMEOUT_SECS=6
      - QUEUE_RECEIVE_TIMEOUT_SECS=6
      - POLL_SLEEP_MILLIS=10
      - ERROR_SLEEP_MILLIS=20
      - PROCESS_SLEEP_MILLIS=1
      - PAYMENT_PROCESSOR_DEFAULT_URL=http://payment-processor-default:8080
      - PAYMENT_PROCESSOR_FALLBACK_URL=http://payment-processor-fallback:8080
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '0.20'
          memory: 35M
    networks:
      - payment-processor
      - backend

  payment-worker2:
        <<: *worker

  # Health Checker
  health-checker:
    build:
      context: .
      target: health-checker
    environment:
      - REDIS_URL=redis://redis:6379
      - DEFAULT_PROCESSOR_URL=http://payment-processor-default:8080
      - FALLBACK_PROCESSOR_URL=http://payment-processor-fallback:8080
    depends_on:
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '0.10'
          memory: 10M
    networks:
      - backend
      - payment-processor
    healthcheck:
      test: ["CMD-SHELL", "pgrep -f health-checker || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s


networks:
  payment-processor:
    external: true
  backend:
    driver: bridge

